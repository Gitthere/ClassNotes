5/29/14 Notes

LINUX COMMANDS

sudo -do something as root
   super user do

su - become super user

   sudo su


cat - print contents of argument to terminal

head - output first 10 lines of a file

tail - output last 10 lines

ls - list files

ls -lah - list all long human readable files, a: shows all files incl hidden, h: human readable

chmod - allows rwx permissions for files

chown - allows change to user who owns file and group

less - able to page up, page down so that can go through file

more - 

man - manual

ps - list of processes
ps aux - all of the processes

top - top running processes live

kill - terminate or signal a process




UNIX PERMISSIONS

  ls -lah
   
    permissions  username   group   filelist  date created

      permissions:  -|rwx|-rw-|r--   | denotes directory (octet)

         rwx = user, rw- = group, r-- world


                                file                     dir
            r = read

            w = write

            x = execute   run                    list contents


CHANGING PERMISSIONS

   2 ways:

     octal:

     r -4, w - 2, x - 1:
       rwx = 7, rx = 5, r-- = 4, rw- = 6

     chown - to change ownership:  user   g.html(filename)
   
        chown - jon:staff (user:group)   filename


     shorthand:

       chmod g+r g.html

          [u, g, w] [+, -] [r ,w ,x]

            ug+rw: owner and group able to read write
            w-rwx: world not able to read, write, execute

           chmod 6 4 0 *:  6 4 0 for all three - user, group , world
           chmod w-r *

           chmod go-wx = r--|r-- (doesnt affect user)


        2 executable types:
           scripts
           binaries

          #!(shebang)
          #!/bin/bash (bourne again shell)

http: hyper text transfer protocol


  A.  WHAT HAPPENS WHEN YOU PUT A URL IN BROWSER'S ADDRESS BAR?

    1.  Domain name translation: request for IP address.  

    2.  GET request to port 80 of webserver.browser sends http request (GET-web, POST-web, PUT, DELETE, OPTIONS) to your DNS (Domanin Name Server - IP address).  When you register your domain name the DNS records will tell all the DNS servers in world about your url so will take 20min - 48hrs for all servers to find your url.
    name resolution to translates to an IP address

    Then GET request sends headers (http status code)

    3.  webserver responds with Headers (some sort of html - url, cookies, meta)

    webserver processes request and sends response with   Headers and body (html) back to browser

    4.  html renders in browser

        loops cycle (from step 1 -4) for every asset in the html in order to render in browser


    DNS sole purpose:
      translates domain name into IP address


    /etc/resolv.conf: checks for name server
    DHCP - assignes IP address
    nameserver 8.8.8.8
    nameserver 8.8.4.4

    webserver purpose is to response to http request from browser

      servers: 2 types
        -physical box
        -server daemon service: 4321 http-server

      commonly used WEB servers:
        - Apache (most installed)
        - IIS (microsoft)
        - Nginx 
        - GWS (google web services)
        - AWS



    NS - Name Server
    NS1.DIGITALOCEAN.COM
    NS2.DIGITALOCEAN.COM

      -registrar - ie GoDaddy, set nameservers for domain name here
      -DNS records - you can list what domain names go to which server. records set at DNS host
        -3 types of DNS records
          - A record
            - sets hostname to IP address
          - MX record
          - C name record
      - web hosting
      -NS record points to DNS servers

      As an option:
        name - GoDaddy
        DNS - Dreamhost
        Hosting - Digital Ocean, linode.co rackspace.com


    B. IP address: 80 (port 80) then sent to web server.  web server has daemons (constantly running process) listening on port 80 which is the http port. (w3c - world wide web consortium dictates ports: 22 ssh, 21 ftp, 23 telnet, 443 https).  Headers (url, cookies, meta data), body is blank.  daemons respond with html, js, css jpg, png. mulitple requests as page is loading html.  

    <Don't google, goDaddy for domain names that you are interested in purchasing.>
    INSTEAD USE WHOIS XXX.COM FROM TERMINAL
      query on name itself, response is who owns and name servers


    curl -I: download and display whatever request you gave it, the -I is just the headers


    dig: ask DNS server to translate into IP address

    HTTP Verbs
      GET  -  most servers can only do this and POST
      POST -  method: PUT or method DELETE as most 
              servers can only do GET or POST
      PUT
      DELETE
      OPTIONS - returns types that server handles

    HTTP Response Codes
      500-599 SERVER ERROR
      400 CLIENT ERROR
      300 REDIRECTS
      200-299 SUCCESSFUL
      100 INFORMATIONAL

        200 SUCCESS
        301 PERMANENT REDIRECT (sever will cache fact 
            that not there)
        302 FOUND TEMPORARY REDIRECT (will not show 
            you know)
        404 NOT FOUND
        403 FORBIDDEN
        500 INTERNAL SERVER ERROR

    "man whois" command in terminal: will give manual response to inquiry


    node myscript.js allows you to run js in terminal


    vim modes
    - insert, command



  GIT INSTRUCTIONS AFTER SET UP SUBLIME TEXT

      1.  git init
      2.  ga .
      3.  gcmsg
      4.  git remote add origin <url>(ssh from repo created on github.com) 
      5.  git push -u origin master



    git checkout
      - revert back to previous commit
      - branch, switch to different working branch
      - checking out files

      git checkout development
        checkout branch called development. puts current repository in development branch

      git checkout books.xml
        replace with latest version of books.xml

      git checkout d93432 books.xml
        will revert books.xml to that version back in time, no changes included so need to commit before doing

      git checkout master 
        checkout everything in master 

      git checkout d92343
        checkout allows to look at previous commit.  detached head state so can't commit

      git checkout -b fix_login
        makes new branch called fix_login and goes into it


      Concatenate:  adding strings together
        var a=200, var b="string", 
        ex. 200 + "22" = 20022 console.log (a+b)
            200 + "2c" = NaN  console.log (a-b)


HOW TO SET UP JQUERY
  1. JQUERY.COM AND DOWNLOAD V 1.11.1
  2. USE WITH CDN, CUT AND PASTE <script src="//code.jquery.com/jquery-1.11.0.min.js">   </script> IN HEAD AT TOP





JAVASCRIPT

  Everything is an object
    Functions are first-class objects
      Objects have properties and methods

  Global name space
    object is accessible from anywhere



  SELF: Self Invoking Anonymous Function

    (function() {

    })();


  ALERT
  
    alert( );


  PROMPT accepts up to 2 arguments

    prompt("msg", default answer);


DOM - DOCUMENT OBJECT MODEL
  API for interacting with html/xml docs that provides a structure of a document reperesented as a tree and defines the way the structure can be accessed to change structure, style, and content

    TREE STRUCTURE
    each node has one parent except the root parent (window).  nodes can have 0-n children.

    model: window, document, html, body, p#para1

    API is for other apps to have access to an app.
      (Application Programming Interface) A language and message format used by an application program to communicate with the operating system or some other control program such as a database management system (DBMS) or communications protocol. APIs are implemented by writing function calls in the program, which provide the linkage to the required subroutine for execution. Thus, an API implies that a driver or program module is available in the computer to perform the operation or that software must be linked into the existing program to perform the tasks.


    getElementById()
      function

    innerHTML
      property


    EVENTS - type of object that is short lived.  always listening.  could be on window, document.  write script that could trigger events


    ARRAY - list of items/elements, can hold other arrays. Properties: length. can assign to a variable.
      [10, 20, 40, 80]
      a[0]: first element is 0
      a.push will give number of elements in string

    HASH TABLE - 

          var ht = {
                  name:"Jon",
                  age:31
                  }

                  ht.name will return Jon
                  ht['name']will do same thing

    FOR LOOP
      for (var i = 0; i< 3; i++ ) 


    set value to null after every question for Domquiz


6:4:14

PRODUCTION (dont work here)
  Staging - Sandbox : testing (work here)
  Development - (local environment) (work here)

BACK-UPS
  Inspect what you expect


HASH
  ONE WAY HASH - algorithm used to encrypt things and make it difficult to crack code

  node MD5
  crypto in nodejs

    create hash of Haleiwa

SIAF
  (function() {
    //initialization stuff
  })();

  Self Invoking Anonymous Function
    Prevents collisions when collaborating with others
    Once function executes, gotten rid of and frees up memory space



TERMINAL
HOW TO CREATE NEW DIRECTORY IN AN EXISTING DIR AND THEN MAKE A FILE INSIDE OF THAT DIR

  pace@paces-MacBook-Air:~/Desktop/DevLeague|
â‡’  mkdir LongestWord/js && touch LongestWord/js/LongestWord.js

    1. state what dir you want new dir(js), to be created 
       inside of (LongestWord)
    2. && means to do this as well
    3. create file (LongestWord.js) and put it at end of path or  
       where it is going.


CRACKING THE CODING INTERVIEW BOOK - gayle


6:11:14

TDD
  Test Driven Development - used for data modeling
    1. Write test
    2. Run test
    3. Implement functions/software
    4. Passing test
    5. Refactoring. Add comments on code and documentation

BDD
  Behavior Driven Development - tests for broken software as users will find ways that sw has not accomodated for. features and functionality. use of "should". this is what stakeholders want to see.  built from users perspective.

    Jasmine BDD 2.0


6:12:14

MOCHA AND CHAI DO WHAT JASMINE DOES, BUT WILL ALLOW FOR MORE CUSTOMIZATION. AND WILL ALLOW FOR MORE TDD OR BDD STYLES.
  USE 'spec' IN MOCHA TO GET MORE DETAIL ON "ASSERT", "EXPECT", "SHOULD" TESTS.

MOCHA - TEST RUNNER, DOESNT DO ANY ASSERTIONS
  need TEST folder for each dir: .js

CHAI - ASSERTION LIBRARY: SHOULD, ASSERT AND EXPECT



6:14:14

LIBRARY
  COLLECTION OF TOOLS. HAS A NAME, VERSION.  IT CAN ALTER THE WAY THAT YOU WRITE YOUR CODE.  YOU DONT WANT TO INCLUDE MULITIPLE CONFLICTING LIBRARIES - THIS IS RESPONSIBILITY OF DEV AS WILL NOT RECEIVE AN ERROR MSG.

    JQuery is a library.

        $ is a selector - shorthand for JQuery
          $("selector")

          $("#container")
          $("container.specific") - all files with 'specific'
          $("p").attr("name"."jon")
                .fadeOut();


gee-mail-plus
  
  1. clone /Devleague/C2/gee-mail-plus
  2. git checkout -b farpot
  3. git checkout -b farpot.development
  4. git branch
  5. git push origin farpot.development
  6. git push origin farpot
  7. git checkout -b farpot.access.prepopulated data
  8. 

TO PUSH TO DEVELOPMENT BRANCH
  switch to main development branch
  git pull origin farpot.developmet
  gst
  git merge "mailbox" from the development branch
  gp

    ALWAYS PULL FROM DEVELOPMENT BRANCH FIRST, BEFORE PUSH.


6:17:14

Scrum - set of rules based on Agile, short meetings
  3 roles
    1. voice of stakeholder - Product Holder
    2. Developers
    3. Scrum Master - Project Mangager, servant leader, between 
       owners and develpers.  makes sure things are done correctly.  
      planning phase - sprints
      "what did you do yesterday?"  "What are you doing today?"
      "what are some issues that may arise?"

Agile - sw development able to make changes to large programs


EPIC - large story
  SPRINT - chapters
    USER STORY - little things


6:21:14

GIT
  
  MASTER BRANCH
    SHASTIN
      SHASTIN.DEVELOPMENT (ALL THE GOOD CODE TO BE DIST TO TEAM)
        SHASTIN.FIXOVERWRITINGINBOX
        SHASTIN.CLEANHTML (CREATE NEW SPACE TO WORK)

          BEFORE EVERYTHING, DO A GIT STATUS

          1. FROM FEATURE BRANCH (farpotshket.getNewMessage), CHECKOUT DEVELOPMENT BRANCH

              git checkout farpotshket.development


          2. FROM DEVELOPMENT BRANCH, PULL (from where and what branch) DEV [gpull origin farp.dev]

              git pull origin farpotshket.development


          3. FROM DEVELOPMENT BRANCH, MERGE FEATURE BRANCH

              git merge farpotshket.getNewMessage


          4. FROM DEVELOPMENT BRANCH, PUSH (from where and what branch)DEV BRANCH

              git push origin farpotshket.development


        ------------ BELOW IS OPTIONAL -------------------      

          5. FROM DEV CHECKOUT NEW FEATURE BRANCH (OPTIONAL)
          6. FROM ALMOST ANY BRANCH, GIT BRANCH -D OLD_FEATURE_BRANCH ( TO DELETE BRANCH)

          WIP - WORK IN PROGRESS IF PUSH CODE NOT WORKING

          m(odify) app.js - not clean so will not keep changes
            create new branch to backup

            git stash
            git stash pop - only applies modified changes and removes from list of stashes
            git stash apply - doesnt remove

  TO WORK ON NEWLY PUSHED BRANCH
   1. git pull on dev to get the new pushed branch
   2. git checkout shastin. (goes into new branch and tracks)


6:25:14

for()
  to set parameters for for loop. () contains 3 expressions (i=0;i<10;i++)

$.each


7:2:14

RECURRSION

  1. function called in itself  
  2. base case (is the terminal case)
  
  
    write function for !3

      1. function factorial(num) { //infinite loop (base case)

            factorial(num+1);
          }

          factorial (3);


      2. function factorial(num) {
           if (num >10) {
              return num; (terminal case)
           } else {
              return factorial(num + 1);
           }
         factorial(3);
         }


      3.
        > function factorial(num) {
      ..... console.log(num);
      ..... if(num < 2) return num;
      ..... return num*(factorial(num-1));
      ..... }
      undefined
      > console.log(factorial(8));
      8
      7
      6
      5
      4
      3
      2
      1
      40320

      4.
        var searchPlan = ["nana's", "weirdGuy", "fido", "landlord"];

        function findDoge(searchArea, location) {
          location = location || null;
          if (searchArea[location] == "fido") {
            return "Found Fido!";
          }
          location++;
          return findDoge(searchArea, location);
        }

        console.log(findDoge(searchPlan));


      5. function floop(i) {
            if ( i < 0) {
              console.log("open " + i);
              floop(i-1);                   floop(0), floop(1), floop(2) //this part continues after open 
                                            part finishes, cause still running
            }
            console.log("close " +i);
          return i;
          }
          console.log(floop(2));

         open 2
         open 1
         close 0
         close 1
         close 2



7:3:14


CALLBACK FUNCTION

  1. PASSING IN ANY FUNCTION AS AN ARGUMENT TO ANOTHTER FUNCTION
  2. FUNCTION IS EXECUTED
  3. INVOKE CALLBACK USING ();


  "do after"

  function findDog (name, then) {
    //search for dog
      var found = getDogByName(name);
      if (found != undefined) {
      then(found);
      }
  }

  findDog("Kasper", function(dog) {
    //pet
    //groom
    //cook
  }


  DOCUMENT READY

    Description: Specify a function to execute when the DOM is fully loaded.

    While JavaScript provides the load event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to .ready() is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code. When using scripts that rely on the value of CSS style properties, it's important to reference external stylesheets or embed style elements before referencing the scripts.

    In cases where code relies on loaded assets (for example, if the dimensions of an image are required), the code should be placed in a handler for the load event instead.

    The .ready() method is generally incompatible with the <body onload=""> attribute. If load must be used, either do not use .ready() or use jQuery's .load() method to attach load event handlers to the window or to more specific items, like images.

    All three of the following syntaxes are equivalent:

    $( document ).ready( handler )
    $().ready( handler ) (this is not recommended)
    $( handler )
    There is also $(document).on( "ready", handler ), deprecated as of jQuery 1.8. This behaves similarly to the ready method but if the ready event has already fired and you try to .on( "ready" ) the bound handler will not be executed. Ready handlers bound this way are executed after any bound by the other three methods above.

    The .ready() method can only be called on a jQuery object matching the current document, so the selector can be omitted.

    The .ready() method is typically used with an anonymous function:


    $( document ).ready(function() {
      // Handler for .ready() called.
    });
    Which is equivalent to calling:

    $(function() {
      // Handler for .ready() called.
    });
    If .ready() is called after the DOM has been initialized, the new handler passed in will be executed immediately.



7:9:2014


PROJECT - WORKING THROUGH PROCESSES

  SMALLER PIECES
  TASKS - START WITH THE HARDEST ONES. 
    FER - FINAL END RESULT (HOW IS SHOULD LOOK OR BEHAVE?) 
      1. HOW DO I KNOW IF I'VE COMPLETED THIS TASK?

      2. HOW IS IT NOW?

      3. WHAT NEEDS TO BE ADDED OR CHANGED?
         WHAT INFORMATION DO WE HAVE?
         WHAT INFORMATION DO WE NEED?

      4. BDD OR TDD - MAKE THE CHANGE AND RUN YOUR TESTS. INSPECT THE RESULTS

      5. IF RESULTS ARE NOT WHAT I EXPECTED, THEN GO TO DEBUG MODE


        DEBUG MODE - GOAL: PROOF OF CONCEPT THEN, INTEGRATION

          WHAT DID I JUST WRITE THAT ISN'T RIGHT?
            REVIEW - (GIT DIF), GIT X, SOURCETREE

            IF YOU SEE NO DIFFERENCE, THEN DO PROOF THAT WHAT YOU'RE WRITING MAKES A DIFFERENCE
              TOOL: THROW EXCEPTION, CONSOLE LOG('CHECK')


        DEBUGGING TOOL BELT

          ISOLATE THE PROBLEM
            COMMENT OUT ALL TO ISOLATE PROBLEM OR CREATE NEW PROJECT IN DIFFERENT ENVIRONMENT

          RUBBER DUCKY
            EXPLAIN WHAT HAPPENS ON EVERY LINE TO YOUR RUBBER DUCK SO YOU CAN HEAR THE LOGIC
            TALK IT OUT LOUD

          WHITEBOARD YOUR PLAN
            DOES THIS MAKE 100% SENSE TO ME 

          GIT DIFF
            COMMIT OFTEN SO THAT CAN ISOLATE THE PROBLEM. AFTER EVERY TASK

          GET AWAY
            TAKE WALK, TAKE NAP

          MAKE SOMETHING ELSE WORK

          MANUAL TRACE
            LOG CONTRAST.  CONSOLE LOG AFTER EVERY OTHER LINE TO SEE WHERE IT BREAKS IF DOESN'T LOG

          UML, DRAW IT OUT - USE DIFFERENT PART OF YOUR MIND USING DIAGRAMS    


          NEW LEARNING

            FIND PATTERNS

            RTFM - LOOK FOR EXAMPLES.  STAY WITHIN THE DOMAIN, DON'T GO TO STACKOVERFLOW

            EXPERIMENT - MAKE IT BREAK



  JASON'S VIEW

    FIND PARTS THAT HAVEN'T DONE BEFORE - DO HARDEST PARTS FIRST

    PARTS THAT DID BEFORE - BEGIN AT CENTRAL POINT

    WALKING SKELETON APPROACH
      MAKE BARE BONES WORK


    DEBUGGING

      1. PROCESS OF ELIMINATION

      2. UNDERSTANDING THE CODE

        GROK - FULLY UNDERSTAND, BE TOTALLY IMMERSED IN

        MORE WORTHWHILE TO UNDERSTAND WHAT FUNCTIONS ARE DOING



      1. SINGLE RESPONSIBILITY PRINCIPLE
         FUNCTION SHOULD ONLY BE RESPONSIBLE FOR DOING ONE THING


      2. SEPARATION OF CONCERNS


      BREAK EVERYTHING DOWN TO SMALL SCOPES


SERVER SIDE SCRIPTS

  WHY USE:
    UPLOAD IMAGES, CLIENT CAN COMMUNICATE BACK TO SERVER
    CONTENT GENERATED ON THE FLY IN THE SERVER, MANIPULATE DATA IN SERVER

    SHOW TODAY'S DATE
    ACCESS DATA BASE

  NODE.JS.ORG - SERVER SIDE PLATFORM
    SERVER SIDE SCRIPTING - PHP (PERSONAL HOME PAGE, HYPERTEXT PRE-PROCESSOR), RUBY, PERL, JAVA, ASP (ACTIVE SERVER PAGES)

  HTTP VERBS
    GET     (READ)
    POST    (CREATE)
    PUT     (U)
    DELETE  (DELETE)

  KEY VALUE PAIRS
    \?foo\=bar\&baz\=20

    GET REQUEST
      PUTS PARAMETERS IN THE ADDRESS BAR - USER NAME AND PASS WOULD BE VISIBLE
  
    POST
      PUTS PARAMETERS IN REQUEST HEADERS - NOT VISIBLE
      USE POST TO UPLOAD TO MINIMIZE SIZE

    127.0.0.1 local host, local host


    DEMYSTIFYING
                                REQUEST, RESPONSE
      server.get('/', function(req,res,next) {//LISTENS FOR '/'
      console.log('GET request');
      res.send(req.params);
      }

      server.post('/', function(req,res,next) {
      console.log('POST request');
      res.send(req.body);
      });


      http://   PROTOCOL
      localhost   DOMAIN NAME HOST
      1337        PORT
      ? foo=bar&baz=20  QUERY STRING


7:12:14

  //PATH   //ROUTE
  /USERS/JON.HTML


  1. Error: Cannot find module 'restify'
      need to install restify in terminal via:
        npm install restify


  2. node app.js TO RUN SERVER IN TERMINAL, NEED TO RESTART AFTER EVERY CODE CHANGE


  3. <html>
      <head>
        
      </head>
      <body>
                                                                  
        <form action="http://localhost:8080/output" method="POST" enctype="multipart/form-data">
          <input type="text" name="filename">  //CREATE INPUT BOX W/NAME FILENAME
          <textarea name="content"></textarea> //CREATE TEXT BOX W/NAME CONTENT
          <button type="submit">Send</button>  //CREATE BUTTON,  ALLOWS MORE STYLING VS INPUT(TYPE="SUBMIT, 
                                               //VALUE="SEND".  ALSO COULD USE ('#MYFORM').SUBMIT().
        </form>

      </body>

          enctype - IS NECESSARY FOR UPLOADING IMAGES AND LONG PIECES OF DATA
          action - is url path to send data to
          input - name="" should be variable friendly; maxlength=10 (so users don't write a lot)
          method - GET OR POST

    4. JS
                                          (next is OPTIONAL)
  server.post('/output', function(req,res,next) {
  console.log(req.body.filename, req.body.content);
  fs.writeFile(req.body.filename, req.body.content, function (err) { //CREATES NEW FILENAME AND CONTENT AND    
                                                                     //FILE IN DIRECTORY THAT WORKING IN
    if (err) throw err;
    console.log('It\'s saved!');
  });
  res.send(req.body.filename +' has been created.');//SENDS RESPONSE TO BROWSER WITH FILENAME AFTER FILE CREATED


  DBD - no sql
    DOCUMENT BASED DATASTORE

  RDMS - sql



7:17:14


WAYS TO POST TO A SERVER

  1. Postman
  2. Form ["Post"]
  3. Curl - terminal. used to send information without having to build website, input forms

HTTP = Stateless protocol (do not know identity of requestor), the client needs to delcare the state (format) of the request

  GET      C
  POST     R
  PUT      U
  DELETE   D

REstful resouce is the server
REST (REpresentational State Transfer) is a model that allows work with data on remote resource
  /users        GET         List all resources
  /users        POST        create resource
  /users/21     GET         Show one        //get the 21st post
  /users/21     PUT         Update one
  /users/21     DELETE      Destroy one



7:19:14


CRUD operations Items
  
  /items        GET          List       Jade Template
  /items        POST         create     Redirect
  /items/:id    GET          show       Jade Template
  /items/:id    GET          Edit       Form
  /items/:id    PUT          Update     Redirect
  /items/:id    DEL          Destroy    Redirect
  /items/:id    GET          New        Form



  app.get('/tasks/:id/edit') //the colon allows anything to be after the slash, could be 22222 or whatever.  
                             //if no colon, has to be the exact word that is typed or will not go down path.


  template directory - templates/
  static directory - public /stylesheets/ javascripts/ images/  doesnt need to get access by node js

  requirements:
    express.js
    mongoose
    jade


  1.  open express.js API
      go to guide, create package JSON, cut paste code
      rename to TooDoo
        npm info express version and edit to 4.6.1 in code
          then npm install 
          ga .
          then gcmsg after install

          add .gitignore file for  node_modules

          gst, then ga . 

      NEED THESE FOLDERS
        PUBLIC: IMAGES, JAVASCRIPTS, STYTLESHEETS
        APP.USE(EXPRESS.STATIC(_DIRNAME + '/PUBLIC'));

      API
        create new app.js in TooDoo  -  copy code and paste from API to app.js
          run nodemon app.js in terminal

        go to local host 3000 and should see hello world

        then gcmsg


      CRUD task items

        after parser
        var methodOverride = require('method-override')
        // override with POST having ?_method=DELETEâ€¨app.use(methodOverride('_method'));
        must come AFTER app.use(bodyParser)

        app.use(bodyParser.json());
        app.use(bodyParser.urlencoded({
          extended: true
        }));




        INDEX

        GET



        GET /tasks
        app.get('/', funtion(req, res) {

        })
        app.set('views', _dirname + '/templates')
          app.locals.spongebob

          res.render('test.jade', Locals)


        NEW
        GET /tasks/:id





        SHOW
          GET /tasks/:id





        CREATE (api request for params)
          POST /tasks
            app.post('/tasks', function(req,res) {
              var task = new TaskItem({
              title : req.param('title'),  //var bodyParser = require('body-parser');npm install -S body-parser
              notes : req.param('notes')

              })
              task.save(function(wert, task) {
                if(wert) { res.send(500, wert); }

                res.redirect('/');
              })
            })




        EDIT
          GET /tasks/:id  //then render form w/task detail, then redirect to list or show what was updated




        UPDATE //
          PUT /tasks/:id(long number)
          app.put('/tasks/:id', function(req,res) {
            var id = req.param('id');
            console.log(req.param(id))

            taskItem.findOne({_id: id(long number)}, function() {
              //body...
            })
          })


        DELETE



    app.engine

    npm install -S (save dev) jade

    create templates folder
      test
        res.render('test.jade');

    'extends' for templates
      ../layout.jade

      mixins = 
        mixin task(t)
        each

        go to include top left


    block content
      form( action="/tasks", method="POST", enctype="application/x-www-form-urlencoded")
        p
          label( for="title_input" ) Title
          input#title_input( type="text", name="notes", value=task.title )
        p
          label( for="notes_input" ) Notes
          input#notes( type="text", name="notes" )
        p
          button Create Task

  for EDIT
  form( action="/tasks/#{task.id}?_method="PUT", enctype="application/x-www-form-urlencoded")



CSS  
  to check if linked to code, set background color to red and see if renders  




7:30:14


SERVER

  Model
    For example:
      User
      Vehicle
      Payment
      Rental


  Controller

    controllers are restful, not responsible for figuring out route
    directs traffic
    function create
    function update

    1. handle request
    2. generally associate with model, and interact with model, NOT DB.
    3. send response - rendering a view, send http response


  View

    markup with templates that gives a way to send response via HTML, back to client



CLIENT

  sends request to controller on server



ORM - OBJECT RELATIONAL MODEL
  
  regardless of what type of code, database would be able to operate



SOC - SEPARATION OF CONCERN or SRP - SINGLE RESPONSIBILITY PRINCIPLE
  
  Only have code handle one task, older code would have all tasks on the same page and was not broken into specific tasks



RELATIONAL(SQL) DATABASE MANAGEMENT SYSTEM = RDBMS

  similar to spreadsheet in that made up of rows and columns

  1. RELATIONS
      1 TO 1  -  has one
      1 TO MANY - belongs to, has many
      MANY TO MANY (TRY TO AVOID) - has, and belongs to many
  2. DATA CONSTRAINTS
  3. NORMALIZATION
  4. UNIQUENESS
  5. DATA TYPES
  6. CARDINALITY (MANY TO MANY)



  SQL
    1. Strict types
    2. Integrity


  NO SQL
    1. Dynamic types
    2. 


  query:  SELECT - id, name FROM users


  


SQL - PROJECT
  Tasks
    ID - int or Int
    TITLE - varchar140
    NOTES - text
    CHECKED - boolean or tinyint
    CREATED.AT - Date

  Users
    ID - int
    NAME - varchar140


  user_id

  sql 5.5.32



OBJECT ORIENTED PROGRAMMING
  vs PROCEDURAL PROGRAMMING - define function and call later.  line by line. linear format

  1. CLASS - DEFINES AN OBJECT (BLUEPRINT)
       SUPER CLASS:  UPPER LEVEL CLASSES
       SUB CLASS:  CLASSES BELOW


  2. OBJECT - INSTANCE OF THE CLASS

    ex. CLASS [person]

      Jon is person
      Alex is person



  3. PROPERTY - CHARACTERISTICS OF OBJECT
       EITHER ATTRIBUTES OR VARIABLES


  4. METHOD - CAPABILITIES OF OBJECT, function on an object


    ex.  var Volvo = {

         property: weight, color
         method: drive (function), unlock (function)

         }


  5. CONSTRUCTOR - METHOD THAT EXECUTES AN INSTANTIATION




  6. INHERITENCE - CLASS CAN INHERIT PROPERTIES AND METHODS OF OTHER CLASSES

    ex. CLASS ANIMAL        >(extend)     CLASS - FELINE     >      CLASS - LION
              legs                          tail                      mane
              eyes                          roar()                    aggressive
              ears                          cute()                    title
              breathe()                     land()                    pride
              eat()                                                   rule_kingdom()
              reproduce()                                             eat_human()

        var simba = new Lion();
        simba.eat(simba.tail);



  7. POLYMORPHISM - DIFFERENT CLASSES DEFINE SAME METHODS AND PROPERTIES
                    able to apply characteristic to other objects that can do same thing

      climber
      climb()

        monkey climber
        bear climber
        lion climber



  8. NAMESPACES - CONTAINER FOR DEVELOPERS TO BUNDLE RELATED CLASSES USING UNIQUE
                  APPLICATION, SPECIFIC NAMES (LIKE NODE MODULES)



  ABSTRACTION

    simba eat - do not need to see how digestion actually works, just need to know can eat

    PRIVATE - don't need to see how 
    PUBLIC - able to see
    STATIC - properties and methods of the class. is the blueprint that contains how  
             to create and the characteristics of the instance
    INSTANCE - properties and methods of class instances /"Objects", but doesn't 
               contain the blueprint


  9. PROTOTYPE - allows us to add property and methods to objects


    EXAMPLE CODE BELOW:

    function Animal (name) {//set up animal class
      this.name = name;
    }

    function Monkey (name) {//set up Monkey class which inherits from Animal
      Animal.call(this, name)//links super class Animal and sub class Monkey
    }

    `
    //access to Animal prototype chain
    Monkey.prototype = new Animal();


    //adds run to Animal prototype chain
    Animal.prototype.run = function (){
      console.log(this.name + ' is running');
    }

    //set up Fish class which inherits Animal
    function Fish (name) {
      Animal.call(this, name)
    }

    //set up Bird class which inherits Animal
    function Bird (name) {
      Animal.call(this, name)
    }

    //adds fly to Animal prototype chain
    Bird.prototype.fly = function() {
      console.log(this.name + ' is flying');
    }


    //adds swim to Animal prototype chain
    Fish.prototype.swim = function() {
      console.log(this.name + ' is swimming');
    }

    //set up Ahi class to which inherits Fish
    function Ahi (name) {
      Fish.call(this, name)
    }


    //access to Fish prototype chain
    Ahi.prototype = new Fish();


    //create new instance of monkey class that will be able to do actions
    var bozo = new Monkey ('bozo');
    var daisy = new Monkey ('daisy');
    bozo.run();//call the run method on bozo
    daisy.run();
    console.log(bozo);

    var gucci = new Ahi ('gucci');
    gucci.swim();
    console.log(gucci);

    var bubba = new Bird ('bubba');
    bubba.fly();


TOODOO
  DB OF USERS EACH WITH OWN LISTS OF TASKS
  ARE YOU LOGGED IN?
    NO

      SUBMIT - VALIDATION - IS IT VALID?
        NO
          REPORT INVALIDATION ERRORS, REDIRECT TO LOGIN

        YES

          AUTHENTICATE
            NO
              REPORT ERRORS, REDIRECT TO LOGIN

            YES
              GO TO TASKS

    YES
      GO TO TASKS


  VALIDATION



  AUTHENTICATION - YOU ARE WHO YOU SAY YOU ARE



  AUTHORIZATION - ACCESS LEVEL, PERMISSION TO ACCESS

    OAUTH - Twitter, github
      email validation, token, password, fingerprint, DNA


  SESSION - HOLD INFORMATION PERSISTENTLY THROUGH COOKIES SO DON'T HAVE TO KEEP 
            LOGGING IN.  SAVES YOUR STATE.  UPON LOGOUT, DESTROYS SESSION
    STORES DATA -  ex. LAST VISITED - SO THAT DO NOT HAVE TO 



8:9:14

CONTROL STRUCTURES

  maintain control of exectution until they decide to let it go

  BREAK 
    breaks out of entire loop
      if (y == 3), will break out of loop and not log y = 3, or anything after.  if break is after console log, will log y = 3.

    ALSO ABLE TO NAME BLOCKS (myexes : {}) AND BREAK LOOP FROM INSIDE BY NAMING BLOCK YOU WANT TO BREAK OUT OF



  CONTINUE
    will bypass any code after, and continue with loop 
    so will skip to next iteration
      if (y == 3) continue;  will break out of loop, not log y = 3, and continue
      with y = 4


  NEED TO RETURN IN CURRENT FUNCTION IN ORDER TO BE ABLE TO LOG FUNCTION

    function findexes () {
      function changex () {
        return
      }
      change();
      return
    }
    console.log (findexes)

  TO AVOID DUPLICATES IN LOOP
  for (var i = ); i < 5; i++) {
    for (var k = i; k < 5; k++) {
    console.log("mulitply %d and %d, i, k");
    }
  }


  chain.js

  number.prototype.add = function(b) {
    return  this + b;
  };

  number.prototype.subtract = function(b) {
    return  this - b;
  };

  number.prototype.toMonkey = function() {
    return "monkey";
  }

  var num = 10;                                 //mo, key  //will rtn 2    //rtn 6
  console.log( num.add(3).subtract(7).toMonkey().split("n").length.toMonkey().length);
                                                                  //rtn monkey


MIDDLEWARE

  Code inbetween existing sequence of events, such as the request and response, that handles processing of request
  used for:
    route handling, writing routing
    custom logging


  //prevent users from going directly to route
  //they would need to login first before having access
  router.use(function(req, res, next) {
    //all routes handled by this router pass through this function
    if(!req.user){
    res.redirect('/login');
    }
    next();
  });



DEBUGGING 8x8BitMap
  
  JS********************

  (function() {
  //initialization stuff
  var maxLength = 8;
  var inputString = "18 3C 7E 7E 18 18 18 18";

  function processInputString(inputString) {
    var outputArray = [];
    var slitHexArray = inputString.split(" ");
    // console.log(splitHexArray); //check if splits string
    for (var i = 0; i < splitHexArray.length; i++) {
      var currentValue = splitHexArray[i];
      var convertedValue = parseInt(currentValue, 16).toString(2);
      var outputPaddedValue = "";
      var paddingLength = maxLength - convertedValue.length;
      var tempPadding = "";

      for (var j = 0; j < paddingLength; j++) {
        tempPadding += "0";
      }

      outputPaddedValue = tempPadding + convertedValue;
      // console.log(outputPaddedValue);

      outputArray.push(outputPaddedValue);
    }

    return outputArray;

  }

  function displayElements(elementArray) {
    for (var i = 0; i < elementArray.length; i++) {
      var currentBinaryValue = elementArray[i];
      var containerElement = document.getElementById('container');
      var binaryRowElement = document.createElement('div');

      binaryRowElement.innerHTML = currentBinaryValue;

      containerElement.appendChild(binaryRowElement);

    };
  }

  var outputArray = processInputString(inputString);
  // console.log(outputArray);
  displayElements(outputArray);

  })();


  HTML*******************

  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Document</title>
  </head>
  <body>
    <div id="container", class="container"></div>
    <script src="js/app.js"></script>
  </body>
  </html>



SET UP FOR WEBSITEBLOG PROJECT

  1. in terminal sudo npm i -g express
  2. in terminal express create websiteBlog
      check to see if file structure is correct and all folders created
  3. in terminal npm install  express, body-parser, mongoose, jade (npm install -S (save dev) jade)
     method-override
  4. mongolab.com
      create new mongoDB deployment
        var mongoose = require('mongoose');

        set var Scehma = mongoose.Schema

        set new user name and password
          paste into -  mongoose.connect('mongodb://toodoo_express:toodoo_express@ds027709.mongolab.com:27709/toodoo_express');




DESIGN PATTERNS - A LOOK INTO JQUERY

  What are design patterns
    - proven ways to solve problems
    - scalable as they are usually structured and have rules that you should follow
    - reuseable for similar problems

  CREATIONAL

    focussed on ways to create objects
      var input = $('<input>');


  STRUCTURAL DESIGN PATTERNS

    helpful when figuring out how a system should work


  COMPOSITE PATTERN

    groupus of objects can be treated the same way as individual objects of the group


  FACADE PATTERN

    provides user with a simple interface, while hiding its underlying complexity
      i.e. document.ready



  BEHAVIORAL PATTERNS

    object oriented software systems will have communication between objects. it prescribes different methods



  OBSERVER PATTERN

    JQuery is keeping track of elements and the functions that should occur when triggered
    i.e. hover



  ITERATOR PATTERN

    separates algorithms from containers
    i.e. $.each
  



GIT
  
  SHOULD ALWAYS CREATE DEVELOPMENT BRANCH AS A WORK AREA, CREATE ANOTHER REMOTE-MASTER BRANCH FOR 
  FETCHING, THEN PULLING THE UPDATED CHANGES.  THEN GCO TO DEVELOPMENT AND GIT MERGE REMOTE-MASTER

  WHEN HAVE ADEQUATE AMOUNT OF WORKING CODE ON DEVELOPMENT BRANCH, GCO MASTER
  THEN GIT MERGE DEVELOPMENT BRANCH
  NOW ABLE TO GP FROM MASTER